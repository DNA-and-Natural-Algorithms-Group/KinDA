#!/usr/bin/env python

"""
--------------------------
KinDA executable workflow:
--------------------------

cat input.pil | peppercorn -c -d [--options] | KinDA [--options]

    Selected options:
        --backup kotan.db (exports results to kotan.db)
        --recover kotan.db (loads system from kotan.db)

    Potential improvements:
        *) it is not possible to load and extend a database, or to read out
        just the relevant parts. (e.g. reporter systems might be redundant
        between experiments, so why calculate them every time new?)
        Unfortunately, I think one needs to store canonical complex forms for
        that (possible with dsdobjects)

        *) the existing import/export structure is a little more rigid than
        necessary. A clearer separation of system and session-parameters would
        be nice (e.g. multiprocessing)
"""

from __future__ import absolute_import, print_function

import os
import sys
import argparse
import peppercornenumerator

import kinda
from kinda.input import read_pil
from kinda.output import write_pil
from kinda.statistics.stats_utils import import_data, export_data

def init_parameter_dicts(args):
    """Initialize kinda's parameter format.
    
    When using the kinda library, parameter defaults are set during
    installation in kinda.options. Here, we want to keep an overview
    and control parameters at runtime.

    Args:
        args (argparse.ArgumentParser()): Commandline parameters.

    Not all parameters can set via commandline arguments, time will tell...
    """

    kparams = {
        # System Parameters
        'start_macrostate_mode': args.macrostate_mode if args.macrostate_mode else args.start_macrostate_mode,
        'stop_macrostate_mode': args.macrostate_mode if args.macrostate_mode else args.stop_macrostate_mode,
        'multistrand_similarity_threshold': args.similarity_threshold,
        'nupack_similarity_threshold': args.similarity_threshold,

        # Session Parameters
        'multistrand_multiprocessing': not args.no_multiprocessing,
        'nupack_multiprocessing': not args.no_multiprocessing,
        'max_concentration': args.max_concentration,
    }
    
    mparams = {
        # Session Parameter
        'verbosity': 0,
        # System Parameters
        'dangles': args.dangles.title(), # first letter uppercase
        'substrate_type': args.material,
        'temperature': args.temperature,
        'unimolecular_scaling': 2.41686715e+06,
        'bimolecular_scaling': 8.01171383e+05,
        'simulation_time': args.multistrand_timeout,
        'sodium': args.sodium,
        'magnesium': args.magnesium,
        'output_interval': -1,
        'parameter_type': 'Nupack',
        'rate_method': 'Metropolis',
        'join_concentration': 1e-15  # collition rate of complexes. ([] * k_bi)
        # join_concentration must be low enough to ensure that no bind
        # reactions occur after the first step of a simulation.
    }

    nparams = {
        # System Parameters
        'dangles': args.dangles,
        'material': args.material.lower(),
        'T': args.temperature,
        'sodium': args.sodium,
        'magnesium': args.magnesium
    }

    # More Session parameters
    rate_params = {
        'relative_error':  args.error_goal if args.error_goal is not None else args.rate_error_goal,
        'min_batch_size':  args.rate_batch_size[0],
        'init_batch_size': args.rate_batch_size[1],
        'max_batch_size':  args.rate_batch_size[2],
        'max_sims':        args.max_sims if args.max_sims is not None else args.rate_max_sims
    }
    rate_params['min_batch_size'] = min([rate_params['min_batch_size'], rate_params['max_sims']])
    rate_params['init_batch_size'] = min([rate_params['init_batch_size'], rate_params['max_sims']])

    prob_params = {
        'relative_error':  args.error_goal if args.error_goal is not None else args.prob_error_goal,
        'min_batch_size':  args.rate_batch_size[0],
        'init_batch_size': args.prob_batch_size[1],
        'max_batch_size':  args.prob_batch_size[2],
        'max_sims':        args.max_sims if args.max_sims is not None else args.prob_max_sims
    }
    prob_params['min_batch_size'] = min([prob_params['min_batch_size'], prob_params['max_sims']])
    prob_params['init_batch_size'] = min([prob_params['init_batch_size'], prob_params['max_sims']])

    return kparams, mparams, nparams, rate_params, prob_params
 
def peppercorn(pilstring, is_file = False, params=None):
    """Requires peppercorn v0.6.2"""
    from peppercornenumerator import Enumerator
    from peppercornenumerator.input import read_pil as pepper_read_pil
    from peppercornenumerator.output import write_pil as pepper_write_pil

    cxs, rxns, strands = pepper_read_pil(pilstring, is_file, composite = True)

    enum = Enumerator(cxs.values(), rxns)
    enum.enumerate()
    
    return pepper_write_pil(enum, fh = None, 
            detailed = True, condensed = True, composite = strands)

def calculate_all_complex_probabilities(KindaSystem, spurious,
        backup = None, verbose = 0, use_pickle = True, **kwargs):
    """ TODO

    Args:
        KindaSystem():
        verbose (int):
        kwargs (dict): Arguments that are passed on to get_conformation_probs() of the
            kinda.statistics.stats.RestingSetRxnStats() object.

    Doublecheck: Probability of the spurious conformation None.
    """
    ## Get resting sets from database, but don't do nothing yet
    restingsets = KindaSystem.get_restingsets(spurious = spurious)

    ## Analyze each resting set
    for e, rms in enumerate(restingsets, 1):
        if verbose:
            print("\n# Analyzing resting set {}/{}: {}".format(e, len(restingsets), rms))
    
        # Get present stats object
        rms_stats = KindaSystem.get_stats(rms)

        # Query/calculate probabilities for all conformations 
        # (including the spurious conformation, denoted as None)
        num = rms_stats.get_num_sims()
        rms_stats.get_conformation_probs(verbose = verbose, **kwargs)
        
        if num != rms_stats.get_num_sims() and backup :
            export_data(KindaSystem, args.backup, use_pickle)

        if verbose >= 2:
            tot = 0
            for c in rms.complexes + [None]:
                name = None if c is None else c.name
                tot += rms_stats.get_conformation_prob(name, max_sims=0)
                #print("# {}, {} +/- {}".format(name, 
                #        rms_stats.get_conformation_prob(name, max_sims=0), 
                #        rms_stats.get_conformation_prob_error(name, max_sims=0)))
            print("# Sum of probabilities: {}".format(tot))

def calculate_all_reaction_rates(KindaSystem, unproductive, spurious, 
        backup = None, verbose = 0, use_pickle = True, **kwargs):
    """Calculates reaction rates and error bars.

    There are three types of reactions:
        a) the regular reactions enumerated using peppercorn (and more?)
        b) unproductive reactions

    """
    rxns = KindaSystem.get_reactions(spurious = spurious, unproductive = unproductive)

    ## Simulate each reaction
    for e, rxn in enumerate(rxns, 1):
        if verbose :
            reactants = map(lambda x:x.name, rxn.reactants)
            products  = map(lambda x:x.name, rxn.products)
            print("\n# Analyzing reaction {}/{}: {} -> {}".format(e, len(rxns), 
                ' + '.join(reactants), ' + '.join(products)))
    
        # Get stats object
        rxn_stats = KindaSystem.get_stats(rxn)
    
        # Query/calculate k1 and k2 reaction rates to requested precision
        goal = kwargs['relative_error']
        maxs = kwargs['max_sims']
        min_bs = kwargs['min_batch_size']
        ini_bs = kwargs['init_batch_size']
        max_bs = kwargs['max_batch_size']

        num = rxn_stats.get_num_sims()
        v = 2 if verbose == 1 else verbose
        rxn_stats.get_raw_stat('k1', goal, maxs, 
                init_batch_size = ini_bs, 
                min_batch_size = min_bs, 
                max_batch_size = max_bs, 
                verbose = v)
        maxs -= (rxn_stats.get_num_sims() - num)
        assert maxs >= 0
        rxn_stats.get_raw_stat('k2', goal, maxs, 
            init_batch_size = ini_bs, 
            min_batch_size = min_bs, 
            max_batch_size = max_bs, 
            verbose = verbose)

        if (rxn_stats.get_num_sims() - num) and backup :
            export_data(KindaSystem, args.backup, use_pickle)

def main(args):
    """Calculate DSD system parameters using Mulstistrand and NUPACK.

    KinDA.System is essentially a lazy database. It stores Nupack/Multistrand
    derived parameters from every calculation so far, and updates them whenever
    new values or smaller error bars are requested.

    We destinguish "system paramters", which have to be consisten when
    restoring data from a previously created database file (e.g. temperatur,
    material, etc.) and "session parameters", which can be changed freely (e.g.
    error goals, parallelization, etc.).

    # There are multiple points of entry:
    #   1) Use a *.pil file as produced by peppercorn v0.6 or greater.
    #   2) Use a *.pil file and enumerate using KinDA with *installed* default parameters
    #   3) Use --restore file.db to restore a System (ignores STDIN)
    """

    # Input/parameter processing ...
    systeminput = args.input_filename

    kparams, mparams, nparams, rparams, pparams = init_parameter_dicts(args)

    # Import/Export
    if args.database:
        if (args.restore_json or args.backup_json or args.restore or args.backup):
            raise SystemExit('You may not specify any other I/O paramters when using --database.')
        args.restore = args.backup = args.database

    import_pickle = False if args.restore_json else True
    export_pickle = False if args.backup_json else True
    args.backup = args.backup_json if args.backup_json else args.backup
    args.restore = args.restore_json if args.restore_json else args.restore

    # Session parameters
    unproductive = args.unproductive_reactions
    if unproductive is True: 
        unproductive = None

    spurious = args.spurious_reactions
    if spurious is True: 
        spurious = None

    if not args.force and args.backup and os.path.exists(args.backup):
        if args.restore != args.backup:
            raise SystemExit('Use --force to overwrite existing backup file.')

    # System initialization
    if args.restore:
        # Restore a backup file from a previous analysis. This mode ignores any
        # other form of input. Sanity checks ensure that the system parameters
        # match those of the restored database.
        if systeminput :
            raise SystemExit('--restore mode cannot handle *.PIL file input.')
        if not os.path.exists(args.restore):
            raise SystemExit('Cannot find file to restore database: {}.'.format(args.restore))

        if args.verbose:
            print('# Importing options and parameters from {}.'.format(args.restore))

        KindaSystem = import_data(args.restore, import_pickle)

        for k,v in KindaSystem.initialization_params['kinda_params'].items():
            if v != kparams[k]:
                print("# WARNING: recovered system uses",
                        "different KinDA paramter: {} = {}".format(k, v))
        for k,v in KindaSystem.initialization_params['multistrand_params'].items():
            if v != mparams[k]:
                print("# WARNING: recovered system uses",
                        "different Multistrand paramter: {} = {}".format(k, v))
        for k,v in KindaSystem.initialization_params['nupack_params'].items():
            if v != nparams[k]:
                print("# WARNING: recovered system uses",
                        "different NUPACK paramter: {} = {}".format(k, v))

    else :
        if not systeminput :
            systeminput = ''
            for l in sys.stdin:
                systeminput += l

        cxs, det, rss, con = read_pil(systeminput, args.input_filename is not None)
        if cxs == []:
            raise SystemExit('ERROR: No complexes found.')
        elif not (det and rss and con): 
            if args.verbose:
                print('# Enumerating using peppercornenumerator-{} with default paramters.'.format(
                    peppercornenumerator.__version__))
            pilstring = peppercorn(systeminput, args.input_filename is not None)
            cxs, det, rss, con = read_pil(pilstring, is_file=False)

        if args.verbose:
            print('# Initializing KinDA system.')
        KindaSystem = kinda.System(cxs, rss, det, con, enumeration = False, 
                kinda_params = kparams, multistrand_params = mparams, nupack_params = nparams)

        if args.database and os.path.exists(args.database):
            # Always needs to load the full database, independent on which
            # reactions have been specified as input. If less reactions are given,
            # then we need to make sure that only these reactions are actually
            # quried later.  If more reactions are given, then that just means we
            # extend the database.
            if args.verbose:
                print('# Importing data from {}.'.format(args.database))
            raise NotImplementedError('need to merge updates')
            import_system(KindaSystem, args.database)

    # Now that we have the Kinda System setup, we can do two things:
    #   1) calculate probabilites of being in a particular resting complex using Nupack
    #   2) calculate reaction rates using Multistrand

    # let's do 1)
    calculate_all_complex_probabilities(KindaSystem, spurious,
            args.backup, args.verbose, export_pickle, **pparams)
   
    # let's do 2)
    calculate_all_reaction_rates(KindaSystem, unproductive, spurious, 
            args.backup, args.verbose, export_pickle, **rparams)
   
    if args.backup:
        print("\n# Results stored in {} using {} format.".format(args.backup,
            'PICKLE' if export_pickle else 'JSON'))


    ######################
    # Print the results: #
    ######################

    if args.output is None:
        write_pil(KindaSystem, sys.stdout, spurious=spurious, unproductive=unproductive)
    else :
        with open(args.output, 'w') as pil :
            write_pil(KindaSystem, pil, spurious=spurious, unproductive=unproductive)
        print("\n# Results wrote to {} using *.pil format.".format(args.output))


def add_kinda_args(parser):
    interface = parser.add_argument_group('KinDA I/O parameters')
    session   = parser.add_argument_group('KinDA session parameters')
    system    = parser.add_argument_group('KinDA system paramters')

    parser.add_argument('--version', action='version', version='%(prog)s ' + kinda.__version__)
    parser.add_argument( '-v', '--verbose', action='count', default=0,
        help="Print more output (-vv for extra debugging information)")

    # I/O paramters
    interface.add_argument('input_filename', default=None, nargs='?', metavar='<str>',
            help="Path to the input file.")

    interface.add_argument('-o', '--output', default=None, metavar='<str>',
            help="Specify output file. Prints to STDOUT if not provided.")

    interface.add_argument('-b', '--backup', default=None, metavar='<str>',
        help="""Store system in the given pickle file.""")

    interface.add_argument('--backup-json', default=None, metavar='<str>',
        help="""Store system in the given JSON file.""")

    interface.add_argument('-r', '--restore', default=None, metavar='<str>',
        help="""Restore system from given pickle file.""")

    interface.add_argument('--restore-json', default=None, metavar='<str>',
        help="""Restore system from given JSON file.""")

    interface.add_argument('-d', '--database', default=None, metavar='<str>',
        help="""Restore from and backup to given database file (uses PICKLE).""")
        # NOTE: It would be nice to store/load/update *any* given database
        # file, but that requires dsdobjects.

    interface.add_argument('--force', action='store_true',
        help="""Overwrite existing files.""")

    # Session parameters
    session.add_argument('--unproductive-reactions', action='store_true',
            help="""Toggle to include unproductive reactions for analysis.""")

    session.add_argument('--spurious-reactions', action='store_true',
            help="""Toggle to include spurious reactions and complexes for analysis.""")

    session.add_argument('-e', '--error-goal', type=float, default = None,
            metavar='<float>', 
            help="""If provided, overwrites both --rate-error-goal and
            --prob-error-goal.""")

    session.add_argument('--rate-error-goal', type=float, default = 0.3, 
            metavar='<float>',
            help="""Relative error goal for reaction rates.""")

    session.add_argument('--prob-error-goal', type=float, default = 0.3, 
            metavar='<float>',
            help="""Relative error goal for complex probabilities.""")

    session.add_argument('--rate-batch-size', type=int, nargs=3, 
            default = [40, 80, 400], metavar='<int>',
            help="""Adjust batch size for Multistrand simulations. 

                - First argument: minimum batch size 
                - Second argument: initial batch size 
                - Third argument: maximum batch size 

            When using multiple cores, the batch size is devided by the number
            of cores.  A smaller batch size can lead to slower runtime when
            using multiple cores, as all parallel jobs have to finish in order
            to determine whether a new batch gets submitted. A large batch size
            can lead to excess work in order to reach your error goals.""")

    session.add_argument('--prob-batch-size', type=int, nargs=3, 
            default = [40, 80, 400], metavar='<int>',
            help="""Adjust batch size for NUPACK stochastic backtracking. 
            Equivalent behavior to --rate-batch-size. """)

    session.add_argument('-s', '--max-sims', type=int, default = None,
            metavar='<int>', 
            help="""If provided, overwrites both --rate-max-sims and
            --prob-max-sims. --max-sims 0 will turn off all simulations.""")

    session.add_argument('--rate-max-sims', type=int, default = 1000, metavar='<int>',
            help="""Maxum number of Multistrand simulations for this Session.""")

    session.add_argument('--prob-max-sims', type=int, default = 1000, metavar='<int>',
            help="""Maxum number of NUPACK simulations for this Session.""")

    session.add_argument('--max-concentration', type=float, default = 1e-7, 
            metavar='<float>',
            help="""Maximum concentration of any resting complex in the system.""")

    session.add_argument('--multistrand-timeout', type=float, default = 1.0, 
            metavar='<float>',
            help="""Maximum Multistrand simulation time [seconds].""")

    session.add_argument('--no-multiprocessing', action="store_true",
            help="""Switch off multiprocessing for Multistrand and NUPACK.""")

    # System parameters
    system.add_argument('--macrostate-mode', action="store",
            choices=('count-by-complex', 'count-by-domain', 'disassoc'),
            default = None, 
            help="""Use corresponding Multistrand macrostate model. If
            provided, overwrites both --start-macrostate-mode and
            --stop-macrostate-mode.""")

    system.add_argument('--start-macrostate-mode', action="store",
            choices=('count-by-complex', 'count-by-domain', 'disassoc'),
            default = 'disassoc', 
            help="""Use corresponding Multistrand macrostate model for sampling
            of initial conformation.""")

    system.add_argument('--stop-macrostate-mode', action="store", 
            choices=('count-by-complex', 'count-by-domain', 'disassoc'),
            default = 'disassoc',
            help="""Stop a Multistrand simulation whenever a trajectory reaches
            one of these possible macrostate definitions. 
                - disassoc: A given set of ordered complexes.
                - count-by-complex: Number of base-pairs in complex > th
                - count-by-domain: Number of base-pairs per domain > th
            where th = --similarity-threshold. """)

    system.add_argument('--similarity-threshold', type=float, 
            default = 0.51, metavar='<float>',
            help="""Similarity threshold to assign complexes to domain-level
            macrostates (= 1-"max-domain-defect").""")

    system.add_argument('-T','--temperature', type=float, default=25, metavar='<float>',
            help="""Simulation temperature in Celsius.""")

    system.add_argument('--sodium', type=float, default=1.0, metavar='<float>',
            help="""Sodium concentration [M].""")

    system.add_argument('--magnesium', type=float, default=0.0, metavar='<float>',
            help="""Magnesium concentration [M].""")

    # Potentially supported parameters.
    system.add_argument('--dangles', default='some',
            choices=('some', 'all', 'none'),
            help="""NUPACK / Multistrand dangle parameter.""")

    system.add_argument('--material', default='DNA',
            choices=('DNA'),  # RNA not supported
            help=argparse.SUPPRESS)

    return

if __name__ == '__main__':
    parser = argparse.ArgumentParser(
            formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    add_kinda_args(parser)
    args = parser.parse_args()
    main(args)

